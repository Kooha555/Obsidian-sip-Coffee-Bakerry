import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
// import instance ‡∏Ç‡∏≠‡∏á axios/api ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ
import api from "../services/api";
import { useCart } from "../context/CardContext";

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Component ‡∏ä‡∏∑‡πà‡∏≠ Checkout ‡πÄ‡∏õ‡πá‡∏ô function
export const Checkout = () => {
  const navigate = useNavigate(); // hook ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const location = useLocation(); // hook ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô state ‡∏ï‡∏≠‡∏ô navigate
  const { user } = useAuth(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å AuthContext
  const {clearCart} = useCart(); // ‡∏î‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Clear ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏à‡∏≤‡∏Å CartContext

  // ‡∏£‡∏±‡∏ö basket ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Addtocart ‡∏ú‡πà‡∏≤‡∏ô navigate state
  const initialBasket = location.state?.basket || [];
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ basket ‡∏à‡∏≤‡∏Å state ‡∏Å‡πá‡πÉ‡∏ä‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô []

  // --- State ‡∏´‡∏•‡∏±‡∏Å ---
  const [basket, setBasket] = useState(initialBasket); // state ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  // state ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á: dinein, pickup, delivery
  const [orderMethod, setOrderMethod] = useState("dinein");
  // state ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: saved ‡∏´‡∏£‡∏∑‡∏≠ new
  const [profileChoice, setProfileChoice] = useState("saved");
  // state ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: saved ‡∏´‡∏£‡∏∑‡∏≠ new
  const [addressChoice, setAddressChoice] = useState("saved");

  // Set state ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏Å‡πá‡∏ö customer info
  const [customerInfo, setCustomerInfo] = useState({
    firstName: user?.firstname || "", // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å user schema ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô ""
    lastName: user?.lastname || "",
    phoneNumber: user?.phone || "",
    email: user?.email || "",
  });

  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö address
  const [deliveryAddress, setDeliveryAddress] = useState(user?.address || "");

  // Time and Notes
  const [timeNote, setTimeNote] = useState({
    time: "In 15 minutes", // ‡∏Ñ‡πà‡∏≤ default ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏∑‡∏≠ "‡∏≠‡∏µ‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ"
    note: "", // ‡∏Ñ‡πà‡∏≤ note ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á
  });

  const deliveryFee = 40; // ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á fix 40 ‡∏ö‡∏≤‡∏ó
  // state ‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á)
  const [subtotal, setSubtotal] = useState(0);

  // Function ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å basket 
  const handleRemoveItem = (itemId) => {
    // filter ‡πÄ‡∏≠‡∏≤‡∏ó‡∏µ‡πà id ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á (‡∏•‡∏ö item ‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö itemId ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å basket)
    setBasket((prevBasket) => prevBasket.filter((item) => item.id !== itemId)); 
  };

  // Function ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ customer info
  const handleCustomerInfoChange = (e) => {
    const { name, value } = e.target; // ‡∏î‡∏∂‡∏á name ‡πÅ‡∏•‡∏∞ value ‡∏à‡∏≤‡∏Å input
    setCustomerInfo((prev) => ({ // Update state
      ...prev,
      [name]: value,
    }));
  };

  // useEffect
  useEffect(() => { // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ profileChoice ‡∏´‡∏£‡∏∑‡∏≠ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    if (profileChoice === "saved" && user) { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å saved
      setCustomerInfo({ // set ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
        firstName: user.firstname || "",
        lastName: user.lastname || "",
        phoneNumber: user.phone || "",
        email: user.email || "",
      });
    } else { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å new
      setCustomerInfo({ // set ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á
        firstName: "",
        lastName: "",
        phoneNumber: "",
        email: "",
      });
    }
  }, [profileChoice, user]); // dependencies

  useEffect(() => { // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ addressChoice ‡∏´‡∏£‡∏∑‡∏≠ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    if (addressChoice === "saved" && user) { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å saved
      setDeliveryAddress(user.address || ""); // ‡πÉ‡∏ä‡πâ address ‡∏à‡∏≤‡∏Å user schema
    } else {
      setDeliveryAddress(""); // ‡∏ñ‡πâ‡∏≤ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å new ‡πÉ‡∏´‡πâ set ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á
    }
  }, [addressChoice, user]);

  useEffect(() => { // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì subtotal ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ basket ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    const calculatedSubtotal = basket.reduce( // ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ (price * quantity)
      (sum, item) => sum + item.price * item.quantity,
      0
    );
    setSubtotal(calculatedSubtotal); // update subtotal
  }, [basket]);

  // Function to confirm order ---
  const handleConfirm = async (event) => {
    event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô refresh form

    const finalTotal =
      orderMethod === "delivery" ? subtotal + deliveryFee : subtotal; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì total

    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ backend
      const response = await api.post("/orders", { // POST ‡πÑ‡∏õ‡∏¢‡∏±‡∏á path /orders
        customerInfo,
        basketItems: basket,
        orderType: orderMethod,
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å delivery ‡πÉ‡∏ä‡πâ address ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô "N/A"
        address: orderMethod === "delivery" ? deliveryAddress : "N/A",
        subtotal, // ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏ß‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
        deliveryFee: orderMethod === "delivery" ? deliveryFee : 0, // ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á = 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å delivery)
        total: finalTotal,
        note: timeNote.note,
      });

      clearCart(); //Clear ‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏î place order
      // ‡∏ñ‡πâ‡∏≤ success ‚Üí ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ order-confirmation
      navigate("/order-confirmation", {
        state: {
          order: response.data.order, // ‡∏™‡πà‡∏á order data ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ order-confirmation
        },
      });
    } catch (error) {
      console.error(
        "Create order failed:",
        error.response?.data || error.message
      );
      alert(error.response?.data?.message || "Failed to create order"); // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô error
    }
  };

  const finalTotal =
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì total ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô render
    orderMethod === "delivery" ? subtotal + deliveryFee : subtotal;


  // --- JSX ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
  return (
    <div className="bg-[#0f0f10] pt-12 pb-12">
      <form
        onSubmit={handleConfirm} // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Place Order ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å function handleConfirm
        className="border border-gray-200 max-w-4xl mx-auto bg-amber- rounded-2xl p-4 sm:p-6 space-y-6 bg-[#2B1B00]"
      >
        {/* Header Checkout */}
        <div className="bg-[#341f01] py-4 px-4 rounded-lg space-y-2">
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-300 text-center">
            üõí Checkout
          </h1>
        </div>

        {/* Order Summary */}
        <div>
          <h2 className="text-lg sm:text-xl font-semibold mb-2 text-gray-300">
            üßæ Order Summary
          </h2>
          <div className="bg-[#341f01] p-4 rounded-lg space-y-2 text-gray-300">
            <ul className="space-y-1">
              {basket.map((item) => ( // ‡∏ß‡∏ô loop ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô basket
                <li
                  key={item.id}
                  className="flex justify-between items-center text-sm sm:text-base"
                >
                  <div className="flex-grow">
                    {item.name} (x{item.quantity}) {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
                  </div>
                  <div className="flex items-center gap-2">
                    <span>{item.price * item.quantity}‡∏ø</span>
                    <button
                      type="button"
                      onClick={() => handleRemoveItem(item.id)} // ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                      className="text-gray-400 hover:text-black transition-colors p-1 rounded cursor-pointer"
                    >
                      x
                    </button>
                  </div>
                </li>
              ))}
            </ul>
            <hr className="border-t-1 border-black" />

            {orderMethod === "delivery" && ( // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô delivery ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
              <div className="flex justify-between font-medium">
                <span>Delivery Fee</span>
                <span>{deliveryFee}‡∏ø</span>
              </div>
            )}

            <div className="flex justify-between font-bold text-base sm:text-lg">
              <span>Subtotal</span>
              <span>{finalTotal}‡∏ø</span> {/* ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
            </div>
          </div>
        </div>

        {/* Order Type */}
        <div>
          <h2 className="text-lg mt-4 sm:text-xl font-semibold mb-2 text-gray-300">
            üìç Order Type
          </h2>
          <div className="bg-[#341f01] text-gray-300 p-4 rounded-lg space-y-2">
            <div className="space-y-1">
              <label className="flex items-center gap-2 p-2 rounded-lg cursor-pointer hover:bg-stone-400 text-gray-300 hover:text-black">
                <input
                  type="radio"
                  name="method"
                  value="dinein"
                  checked={orderMethod === "dinein"}
                  onChange={(e) => setOrderMethod(e.target.value)} // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ Order Type ‡πÄ‡∏õ‡πá‡∏ô Dine in
                  className="accent-[#9C9284]"
                />
                Dine-in
              </label>
              <label className="flex items-center gap-2 p-2 rounded-lg cursor-pointer hover:bg-stone-400 hover:text-black">
                <input
                  type="radio"
                  name="method"
                  value="pickup"
                  checked={orderMethod === "pickup"}
                  onChange={(e) => setOrderMethod(e.target.value)} // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ Order Type ‡πÄ‡∏õ‡πá‡∏ô pickup
                  className="accent-[#9C9284]"
                />
                Pick-up at store
              </label>
              <label className="flex items-center gap-2 p-2 rounded-lg cursor-pointer hover:bg-stone-400 hover:text-black">
                <input
                  type="radio"
                  name="method"
                  value="delivery"
                  checked={orderMethod === "delivery"}
                  onChange={(e) => setOrderMethod(e.target.value)} // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ Order Type ‡πÄ‡∏õ‡πá‡∏ô Delivery
                  className="accent-[#9C9284]"
                />
                Delivery
              </label>
            </div>

            {orderMethod === "delivery" && ( // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å delivery
              <div className="ml-6 space-y-0">
                <label className="flex items-center gap-2 py-1 px-2 rounded-lg cursor-pointer hover:bg-stone-400 hover:text-black">
                  <input
                    type="radio"
                    name="address-choice"
                    value="saved"
                    checked={addressChoice === "saved"}
                    onChange={(e) => setAddressChoice(e.target.value)} // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å saved address
                    className="accent-[#9C9284]"
                  />
                  <span className="text-sm">Use saved address</span> {/* ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ */}
                </label>
                <label className="flex items-center gap-2 py-1 px-2 rounded-lg cursor-pointer hover:bg-stone-400 hover:text-black">
                  <input
                    type="radio"
                    name="address-choice"
                    value="new"
                    checked={addressChoice === "new"}
                    onChange={(e) => setAddressChoice(e.target.value)} // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å create new address
                    className="accent-[#9C9284]"
                  />
                  <span className="text-sm">Create new address</span> {/* ‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà */}
                </label>
              </div>
            )}
          </div>
        </div>

        {/* Customer Info */}
        <div>
          <h2 className="text-lg sm:text-xl font-semibold mb-2 text-gray-300">
            üë§ Customer Information
          </h2>
          <div className="bg-[#341f01] text-gray-300 p-4 rounded-lg">
            <div className="flex gap-4 mb-4">
              <label className="flex items-center gap-2 py-1 px-2 rounded-lg cursor-pointer hover:bg-stone-400 hover:text-black">
                <input
                  type="radio"
                  name="profile-choice"
                  value="saved"
                  checked={profileChoice === "saved"}
                  onChange={(e) => setProfileChoice(e.target.value)}
                  className="accent-[#9C9284]"
                />
                Use saved details
              </label>
              <label className="flex items-center gap-2 py-1 px-2 rounded-lg cursor-pointer hover:bg-stone-400 hover:text-black">
                <input
                  type="radio"
                  name="profile-choice"
                  value="new"
                  checked={profileChoice === "new"}
                  onChange={(e) => setProfileChoice(e.target.value)}
                  className="accent-[#9C9284]"
                />
                Enter new details
              </label>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <input
                type="text"
                name="firstName"
                placeholder="First Name"
                className="border rounded-lg border-black p-2 text-sm sm:text-base"
                value={customerInfo.firstName}
                onChange={handleCustomerInfoChange}
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å saved details ‡∏à‡∏∞‡∏î‡∏∂‡∏á data ‡∏Ç‡∏≠‡∏á user ‡∏°‡∏≤ auto ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç field ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
                readOnly={profileChoice === "saved"} 
              />
              <input
                type="text"
                name="lastName"
                placeholder="Last Name"
                className="border rounded-lg border-black p-2 text-sm sm:text-base"
                value={customerInfo.lastName}
                onChange={handleCustomerInfoChange}
                readOnly={profileChoice === "saved"}
              />
              <input
                type="text"
                name="phoneNumber"
                placeholder="Phone Number"
                className="border rounded-lg border-black p-2 text-sm sm:text-base"
                value={customerInfo.phoneNumber}
                onChange={handleCustomerInfoChange}
                readOnly={profileChoice === "saved"}
              />
              <input
                type="email"
                name="email"
                placeholder="Email"
                className="border rounded-lg border-black p-2 text-sm sm:text-base"
                value={customerInfo.email}
                onChange={handleCustomerInfoChange}
                readOnly={profileChoice === "saved"}
              />
            </div>
          </div>
        </div>

        {/* Delivery Address */}
        {orderMethod === "delivery" && (
          <div>
            <h2 className="text-lg sm:text-xl font-semibold mb-2 text-gray-300">
              üè† Delivery Address
            </h2>
            <div className="bg-[#341f01] text-gray-300 p-4 rounded-lg">
              <textarea
                className="w-full border rounded-lg border-black p-2 text-sm sm:text-base"
                placeholder="Delivery Address"
                value={deliveryAddress}
                onChange={(e) => setDeliveryAddress(e.target.value)}
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å saved address ‡∏à‡∏∞‡∏î‡∏∂‡∏á data ‡∏Ç‡∏≠‡∏á user ‡∏°‡∏≤ auto ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç field ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
                readOnly={addressChoice === "saved"}
              />
            </div>
          </div>
        )}

        {/* Time & Note */}
        <div>
          <h2 className="text-lg sm:text-xl font-semibold mb-2 text-gray-300">
            üïí Time & Note
          </h2>
          <div className="bg-[#341f01] text-gray-300 p-4 rounded-lg">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <select
                className="border rounded-lg border-black p-2 text-sm sm:text-base bg-[#341f01] text-gray-300 cursor-pointer"
                value={timeNote.time}
                onChange={(e) =>
                  setTimeNote({ ...timeNote, time: e.target.value }) // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤
                }
              >
                <option>Now</option>
                <option>In 15 minutes</option>
                <option>In 1 hour</option>
                <option>Custom Time</option>
              </select>
              <input
                type="text"
                placeholder="Note Ex. Pick up at 3 PM."
                className="border rounded-lg border-black p-2 text-sm sm:text-base"
                value={timeNote.note}
                onChange={(e) =>
                  setTimeNote({ ...timeNote, note: e.target.value }) // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ note
                }
              />
            </div>
          </div>
        </div>

        {/* Submit */}
        <button
          type="submit"
          className="bg-[#C18343] text-black text-2xl font-bold w-full p-3 rounded-xl mt-6 hover:bg-[#3E2723] ease-in-out sm:hover:text-2xl hover:font-bold hover:text-gray-300 transition-all cursor-pointer"
        >
          Place Order {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */}
        </button>
      </form>
    </div>
  );
};
